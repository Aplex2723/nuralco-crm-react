{"version":3,"sources":["context/SidebarContext.jsx","components/ThemedSuspense.jsx","components/AccessibleNavigationAnnouncer.jsx","App.jsx","serviceWorker.jsx","index.jsx"],"names":["SidebarContext","React","createContext","SidebarProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","createElement","Provider","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","concat","role","aria-live","aria-atomic","Layout","lazy","Login","CreateAccount","ForgotPassword","App","Fragment","Router","Switch","Route","path","component","Redirect","exact","from","to","Boolean","window","hostname","match","ReactDOM","render","Suspense","fallback","Windmill","usePreferences","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","log"],"mappings":"oMAGaA,EAAiBC,IAAMC,gBAyBrBC,IAvBgB,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SAChCC,EAA0CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAlDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAEtC,SAASI,IACPD,GAAkBD,GAGpB,SAASG,IACPF,GAAiB,GAGnB,IAAMG,EAAQC,mBACZ,iBAAO,CACLL,gBACAE,gBACAC,kBAEF,CAACH,IAGH,OAAOT,IAAAe,cAAChB,EAAeiB,SAAQ,CAACH,MAAOA,GAAQT,K,gCCzBjD,oBAUea,IARf,WACE,OACEjB,IAAAe,cAAA,OAAKG,UAAU,6FAA4F,gB,kKCoBhGC,MArBf,WACE,IAAAd,EAA8BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAnCe,EAAOb,EAAA,GAAEc,EAAUd,EAAA,GACpBe,EAAWC,cAYjB,OAVAC,qBAAU,WAEJF,EAASG,SAASC,MAAM,GAE1BC,YAAW,kBAAMN,EAAW,gBAADO,OAAiBN,EAASG,SAASC,MAAM,GAAE,aAAW,KAEjFL,EAAW,MAEZ,CAACC,IAGFtB,IAAAe,cAAA,QAAMG,UAAU,UAAUW,KAAK,SAASC,YAAU,SAASC,cAAY,QACpEX,IC4BDY,EAASC,gBAAK,kBAAM,wDACpBC,EAAQD,gBAAK,kBAAM,wDACnBE,EAAgBF,gBAAK,kBAAM,wDAC3BG,EAAiBH,gBAAK,kBAAM,kCAqBnBI,MAnBf,WACE,OACErC,IAAAe,cAAAf,IAAAsC,SAAA,KACEtC,IAAAe,cAACwB,IAAM,KACLvC,IAAAe,cAACI,EAA6B,MAC9BnB,IAAAe,cAACyB,IAAM,KACLxC,IAAAe,cAAC0B,IAAK,CAACC,KAAK,SAASC,UAAWT,IAChClC,IAAAe,cAAC0B,IAAK,CAACC,KAAK,kBAAkBC,UAAWR,IACzCnC,IAAAe,cAAC0B,IAAK,CAACC,KAAK,mBAAmBC,UAAWP,IAG1CpC,IAAAe,cAAC0B,IAAK,CAACC,KAAK,OAAOC,UAAWX,IAE9BhC,IAAAe,cAAC6B,IAAQ,CAACC,OAAK,EAACC,KAAK,IAAIC,GAAG,e,wBCrDlBC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCPNC,IAASC,OACPrD,IAAAe,cAACb,IAAe,KACdF,IAAAe,cAACuC,WAAQ,CAACC,SAAUvD,IAAAe,cAACE,IAAc,OACjCjB,IAAAe,cAACyC,WAAQ,CAACC,gBAAc,GACtBzD,IAAAe,cAACsB,EAAG,SAIVqB,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQC,IAAI,aACZD,QAAQD,MAAMA,EAAM/C,c","file":"static/js/main.b3dc3f01.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\n\n// create context\nexport const SidebarContext = React.createContext()\n\nexport const SidebarProvider = ({ children }) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  function toggleSidebar() {\n    setIsSidebarOpen(!isSidebarOpen)\n  }\n\n  function closeSidebar() {\n    setIsSidebarOpen(false)\n  }\n\n  const value = useMemo(\n    () => ({\n      isSidebarOpen,\n      toggleSidebar,\n      closeSidebar,\n    }),\n    [isSidebarOpen]\n  )\n\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\n}\n\nexport default SidebarProvider","import React from 'react'\n\nfunction ThemedSuspense() {\n  return (\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\n      Loading...\n    </div>\n  )\n}\n\nexport default ThemedSuspense\n","import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('')\n  const location = useLocation()\n\n  useEffect(() => {\n    // ignore the /\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\n    } else {\n      setMessage('')\n    }\n  }, [location])\n\n  return (\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\n      {message}\n    </span>\n  )\n}\n\nexport default AccessibleNavigationAnnouncer\n","// import ReactDOM from 'react-dom';\n// import axios from 'axios';\n// import './index.css';\n\n// function App() {\n//   const [username, setUsername] = React.useState('');\n//   const [password, setPassword] = React.useState('');\n\n//   const handleUsernameChange = (event) => {\n//     setUsername(event.target.value);\n//   };\n\n//   const handlePasswordChange = (event) => {\n//     setPassword(event.target.value);\n//   };\n\n//   const handleLogin = () => {\n//     axios.post('/api/login/', { username, password })\n//       .then(response => {\n//         console.log(response.data); // Maneja la respuesta del backend\n//       })\n//       .catch(error => {\n//         console.error(error); // Maneja los errores de la solicitud\n//       });\n//   };\n\n//   return (\n//     <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n//       <div className=\"bg-white p-8 shadow-md rounded-md\">\n//         <h1 className=\"text-2xl font-bold mb-4\">Login Page</h1>\n//         <div className=\"mb-4\">\n//           <label className=\"block mb-2\">Username:</label>\n//           <input type=\"text\" value={username} onChange={handleUsernameChange} className=\"border border-gray-300 rounded-md px-2 py-1\" />\n//         </div>\n//         <div className=\"mb-4\">\n//           <label className=\"block mb-2\">Password:</label>\n//           <input type=\"password\" value={password} onChange={handlePasswordChange} className=\"border border-gray-300 rounded-md px-2 py-1\" />\n//         </div>\n//         <button onClick={handleLogin} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Login</button>\n//       </div>\n//     </div>\n//   );\n// }\nimport React, { lazy } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\n\nconst Layout = lazy(() => import('./containers/Layout'))\nconst Login = lazy(() => import('./pages/Login'))\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <AccessibleNavigationAnnouncer />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/create-account\" component={CreateAccount} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n          {/* Place new routes over this */}\n          <Route path=\"/app\" component={Layout} />\n          {/* If you have an index page, you can remothis Redirect */}\n          <Redirect exact from=\"/\" to=\"/login\" />\n        </Switch>\n      </Router>\n    </>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.log('error 123')\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/css/tailwind.output.css'\nimport App from './App.jsx'\nimport SidebarProvider from './context/SidebarContext.jsx'\nimport ThemedSuspense from './components/ThemedSuspense.jsx'\nimport { Windmill } from '@windmill/react-ui'\nimport * as serviceWorker from './serviceWorker'\n\n\n\nReactDOM.render(\n  <SidebarProvider>\n    <Suspense fallback={<ThemedSuspense />}>\n      <Windmill usePreferences>\n        <App />\n      </Windmill>\n    </Suspense>\n  </SidebarProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n"],"sourceRoot":""}